name: Image build, push and deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'document/**'
  workflow_dispatch:

env:
  DOCKERHUB_USER_NAME: oldrabbit736
  IMAGE_NAME: oldrabbit736/food-reservation-app:0.0.${{ github.run_number }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.image-name-output.outputs.image-name }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # workflow summary 에 build scan 결과 링크 등 유저 인터페이스를 추가하기 위한 action
      # https://github.com/marketplace/actions/gradle-build-action#build-scans
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # TODO: 잔여 단계 스크립트로 단순화
      - name: Build
        run: ./gradlew build --scan

      - name: Build container image
        run: docker build -f docker/app/Dockerfile -t ${{ env.IMAGE_NAME }} .

      - name: Push to container registry
        run: docker push ${{ env.IMAGE_NAME }}

      - name: Set image name output
        id: image-name-output
        run: echo "::set-output name=image-name::${{ env.IMAGE_NAME }}"

  # 각 environment 로 배포 작업 - 각 environment 마다 job 1개 씩 지정, job 은 deploy.yml workflow 재사용
  # 각 environment 마다 job 1개 씩 지정 하는 것 대신 matrix 에 environment 를 리스트 형식으로 지정하고 대신 job 을 1개로 유지하는 방식도 시도해보았으나,
  # matrix 참고: https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows#example-matrix-strategy-with-a-reusable-workflow
  # 한 가지 문제가 있었는데, parallel instance 중 하나라도 실패하면 나머지 작업도 cancel 시켜버린다는 점입니다. (fast fail)
  # 각 작업이 서로의 성공여부에 상관없이 독립적으로 동작하게 만들기 위해, 비록 약간의 duplication 이 발생하지만, 아래와 같이 job 을 2개로 나누는 방법으로 변경하였습니다.
  deploy-js:
    needs: build-push
    uses: ./.github/workflows/deploy.yml
    with:
      ENV_NAME: PROD_JS
      IMAGE_NAME: ${{ needs.build-push.outputs.IMAGE_NAME }}
      # 이전 job 의 output 으로 IMAGE_NAME 전달
      # IMAGE_NAME: ${{ env.IMAGE_NAME }} 과 같이 직접적으로 env context 를 이용하려 하였으나, github actions 가 설정한 한계에 의해 불가능합니다.
      # 다음 링크의 Limitations 의 마지막 세 번째 항목 참조: https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows#limitations
      # 따라서 workaround 로 job 의 output 을 통해 전달하는 방식을 택하였습니다.
      # 참고1: https://stackoverflow.com/questions/73305126/passing-env-variable-inputs-to-a-reusable-workflow
      # 참고2: https://github.com/orgs/community/discussions/26671
    secrets: inherit

  deploy-ms:
    needs: build-push
    uses: ./.github/workflows/deploy.yml
    with:
      ENV_NAME: PROD_MS
      IMAGE_NAME: ${{ needs.build-push.outputs.IMAGE_NAME }}
    secrets: inherit
